#!/bin/bash

set -e

source /etc/init.d/functions.sh

########################## VARIABLES ############################
DATE="$(date +%F|sed 's/-//g')" # date to be added to ebuilds
TARGET="dev.gentoo.org:~/public_html/distfiles/"
TEMP="/tmp/qt-python-bump/"
OVERLAY="$(portageq get_repo_path / qt)"
QUIET=
####################################################################

usage() {
	echo """

./bump-python-revisions

-h: Display this message
-q: Quiet mode. No questions. Just bump and commit

	"""
}

dosip() {
	SIPKG="sip-${new_sip}" # Format Sip package
	ebegin "Downloading ${SIPKG} tarball..."
	wget -P ${TEMP} http://www.riverbankcomputing.co.uk/static/Downloads/sip4/${SIPKG}.tar.gz || exit 2
	eend $?
	ebegin "Copying ${SIPKG} to ${TARGET}"
	eend $?
	scp ${TEMP}/${SIPKG}.tar.gz ${TARGET} || exit
	cp ${TEMP}/${SIPKG}.tar.gz $(portageq envvar DISTDIR) || exit
	pushd ${OVERLAY}/dev-python/sip/
	tomove=$(find '.' -type f -name "sip-*_pre*.ebuild"|tail -1)
	einfo "Previous ebuild: ${tomove#./}"
	mv ${tomove#./} sip-${new_sip_ver}_pre${DATE}.ebuild || exit 1
	git rm ${tomove}
	ebegin "Changing revision number to: ${new_sip_rev}"
	sed -i -e "/HG_REVISION=/s:=.*:=${new_sip_rev}:" sip-${new_sip_ver}_pre${DATE}.ebuild
	eend $?
	repoman manifest || exit 1
	git add .
	popd
}

dopyqt4() {
	PYPKG="PyQt-x11-gpl-snapshot-${new_pyqt4}" #Format PyQt4 package
	ebegin "Downloading ${PYPKG} tarball..."
	wget -P ${TEMP} http://www.riverbankcomputing.co.uk/static/Downloads/PyQt4/${PYPKG}.tar.gz || exit 2
	eend $?
	einfo "Copying ${PYPKG} to ${TARGET} ..."
	scp ${TEMP}/${PYPKG}.tar.gz ${TARGET} || exit
	cp ${TEMP}/${PYPKG}.tar.gz $(portageq envvar DISTDIR) || exit
	pushd ${OVERLAY}/dev-python/PyQt4/
	tomove=$(find '.' -type f -name "PyQt4-*_pre*.ebuild"|tail -1)
	einfo "Previous ebuild: ${tomove#./}"
	mv ${tomove#./} PyQt4-${new_pyqt4_ver}_pre${DATE}.ebuild || exit 1
	git rm ${tomove}
	ebegin "Changing revision number to: ${new_pyqt4_rev}"
	sed -i "/^REVISION/s:=.*:=${new_pyqt4_rev}:" PyQt4-${new_pyqt4_ver}_pre${DATE}.ebuild
	eend $?
	repoman manifest || exit 1
	git add .
	popd
}

commit() {
	if [[ -z ${QUIET} ]]; then
		ewarn "Your changes are ready to be merged. However I strongly recommend you to review your changes."
		ewarn ""
		einfo "Press 'r' to review your changes or 'y' to merge them to master branch (default 'r')."
		read choice
		case "$choice" in
			y)
				ewarn "Your changes will be merged now. Don't break the overlay or I will shoot you down!"
				git commit -m "PyQt4/sip: Automated version bump, remove old" || exit 2
				git push || exit 2
				;;
			r|"")
				git diff
				;;
			*)
				eerror ""
				eerror "Invalid option. Are you stupid or something?"
				eerror ""
				exit 3
		esac
	else
		git commit -m "PyQt4/sip: Automated version bump, remove old" || exit 2
		git push || exit 2
	fi
}

getrevisions() {
	pushd ${OVERLAY}/dev-python/PyQt4/ > /dev/null
	pyqt4_tomove=$(find '.' -type f -name "PyQt4-*_pre*.ebuild"|tail -1)
	pyqt4_revision=$(grep ^REVISION ${pyqt4_tomove}|cut -d "=" -f 2)
	PVER=$(echo ${pyqt4_tomove/\.\//}|sed "s:PyQt4-\(.*\)_pre.*:\1:")
	popd > /dev/null
	pushd ${OVERLAY}/dev-python/sip/ > /dev/null
	sip_tomove=$(find '.' -type f -name "sip-*_pre*.ebuild"|tail -1)
	sip_revision=$(grep "HG_REVISION=" ${sip_tomove}|cut -d "=" -f 2)
	SVER=$(echo ${sip_tomove/\.\//}|sed "s:sip-\(.*\)_pre.*:\1:")
	popd > /dev/null

	einfo "Old Revisions:"
	einfo "PyQt4 : ${pyqt4_revision}"
	einfo "sip   : ${sip_revision}"

	# Find new revisions
	new_pyqt4=$(curl -s \
		http://www.riverbankcomputing.com/software/pyqt/download \
		| grep "x11-gpl-snapshot-.*.tar.gz" \
		| cut -d '/' -f 5 | cut -d '-' -f 5-6 \
		| sed -e "s@\.tar\.gz.*@@")
	new_pyqt4_rev=$(echo $new_pyqt4 | cut -d '-' -f 2)
	new_pyqt4_ver=$(echo $new_pyqt4 | cut -d '-' -f 1)
	[[ -z ${new_pyqt4} ]] || \
		einfo "New PyQt4 snapshot@rev: ${new_pyqt4}@${new_pyqt4_rev}"
	new_sip=$(curl -s \
		http://www.riverbankcomputing.com/software/sip/download \
		| grep "snapshot-.*.tar.gz" \
		| cut -d '/' -f 5 | cut -d '-' -f 5-8 \
		| sed -e "s@\.tar\.gz.*@@")
	new_sip_rev=$(echo $new_sip | cut -d '-' -f 3)
	new_sip_ver=$(echo $new_sip | cut -d '-' -f 1)
	[[ -z ${new_sip} ]] || \
		einfo "New sip snapshot@rev: ${new_sip}@${new_sip_rev}"
	# Decide what to bump"
	[[ -z ${new_pyqt4_rev} ]] || \
		{ [[ "${pyqt4_revision}" != "${new_pyqt4_rev}" ]] \
			&& dopyqt4 && FOUND=true; }
	[[ -z ${new_sip_rev} ]] || \
		{ [[ "${sip_revision}" != "${new_sip_rev}" ]] \
			&& dosip && FOUND=true; }

	if [[ -n ${FOUND} ]]; then
		commit
		# clean up
		dst=$(portageq envvar DISTDIR)
		einfo "Cleaning up tarballs..."
		[[ -n ${SIPKG} ]] && rm ${TEMP}/${SIPKG}.tar.gz && rm ${dst}/${SIPKG}.tar.gz
		[[ -n ${PYPKG} ]] && rm ${TEMP}/${PYPKG}.tar.gz && rm ${dst}/${PYPKG}.tar.gz
		rm -r ${TEMP}
	else
		ewarn ""
		ewarn "No new snapshots. Sorry :-("
		ewarn ""
	fi
	exit 0

}

einfo """
	###########################################################
	# Automatic PyQt4/sip bumping tool for qt overlay         #
	# Author: Markos Chandras <hwoarang@gentoo.org>           #
	# Use ./bump-python-revisions -h for a usage example      #
	###########################################################
"""

ebegin "Updating tree"
git pull
eend $?

while getopts ":hq" opt; do
	case $opt in
		h)
			usage
			exit 1
			;;
		q)
			QUIET=1
			;;
		?)
			usage
			exit 1
			;;
	esac
done

getrevisions
